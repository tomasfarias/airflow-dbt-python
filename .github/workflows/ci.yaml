name: CI

on:
  push:
    branches: [ master ]
    paths:
      - '**.py'
      - '!airflow_dbt_python/__version__.py'
    tags:
      - "v*"
  pull_request:
    branches:
      - master
    paths:
      - '**.py'
      - '!airflow_dbt_python/__version__.py'

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }} and Airflow ${{ matrix.airflow-version }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9, '3.10', '3.11']
        airflow-version: ['2.5.1', '2.4.3']
        exclude:
          # No constraints available
          - python-version: '3.11'
            airflow-version: '2.4.3'

    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v1
        with:
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            files.pythonhosted.org:443
            hub.getdbt.com:443
            github.com:443
            objects.githubusercontent.com:443
            raw.githubusercontent.com:443
            pypi.org:443

      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.1.4
        with:
          poetry-version: 1.3.2

      - name: Install airflow-dbt-python with Poetry
        run: poetry install -E postgres --with dev

      - name: Install Airflow with constraints
        run: |
          wget https://raw.githubusercontent.com/apache/airflow/constraints-${{ matrix.airflow-version }}/constraints-${{ matrix.python-version }}.txt -O constraints.txt
          poetry run pip install apache-airflow==${{ matrix.airflow-version }} apache-airflow-providers-amazon apache-airflow-providers-ssh -c constraints.txt
          poetry run airflow db init

      - name: Linting with ruff
        run: poetry run ruff .

      - name: Static type checking with mypy
        run: poetry run mypy .

      - name: Code formatting with black
        run: poetry run black --check .

      - name: Set COVERAGE_FILE in environment
        run: echo "COVERAGE_FILE=.coverage.${{ matrix.python-version }}.${{ matrix.airflow-version }}" >> $GITHUB_ENV

      - name: Run tests with pytest
        run: poetry run coverage run -m pytest -v tests/ airflow_dbt_python/utils/

      - name: Upload code coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-data
          path: ".coverage.*"
          if-no-files-found: ignore

  coverage:
    name: Combine and check coverage
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v1
        with:
          egress-policy: block
          allowed-endpoints: >
            files.pythonhosted.org:443
            github.com:443
            api.github.com:443
            pypi.org:443

      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.1.4
        with:
          poetry-version: 1.3.2

      - name: Install airflow-dbt-python with Poetry
        run: poetry install --with dev -E airflow -E airflow-providers

      - name: Download coverage data.
        uses: actions/download-artifact@v3
        with:
          name: coverage-data

      - name: Combine coverage & fail if it's <95%.
        run: |
          poetry run coverage combine
          poetry run coverage html --skip-covered --skip-empty
          poetry run coverage json
          # Save in env variable for badge
          export TOTAL=$(python -c "import json;print(json.load(open('coverage.json'))['totals']['percent_covered_display'])")
          echo "total=$TOTAL" >> $GITHUB_ENV
          # Report and write to summary.
          poetry run coverage report | sed 's/^/    /' >> $GITHUB_STEP_SUMMARY
          # Report again and fail if under 100%.
          poetry run coverage report --fail-under=95

      - name: Upload HTML report if check failed.
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: html-report
          path: htmlcov

      - name: "Make coverage badge"
        uses: schneegans/dynamic-badges-action@v1.6.0
        if: github.event_name != 'pull_request'
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: 81ef37701aa088d18db8a58ce07c79c7 # pragma: allowlist secret
          filename: covbadge.json
          label: Coverage
          message: ${{ env.total }}%
          minColorRange: 50
          maxColorRange: 90
          valColorRange: ${{ env.total }}
